{"ast":null,"code":"var _jsxFileName = \"/home/maciej/Desktop/CodersLab/starWars-Deploy/src/Components/App/MainContent/MovieElement/TableElement/TableElement.js\";\nimport React, { useState, useEffect } from \"react\";\nimport LoadingScreen from \"./LoadingScreen/LoadingScreen\";\nimport \"./TableElement.scss\";\n\nconst TableElement = props => {\n  const [planetsAPIs] = useState(props.planets);\n  const [planets, setPlanets] = useState([]);\n  useEffect(() => {\n    planetsAPIs.forEach(planetAPI => {\n      fetch(planetAPI).then(resp => resp.json()).then(data => setPlanets(prevState => {\n        return [...prevState, data];\n      }));\n    });\n  }, []);\n\n  const sortAsc = by => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return -1;\n      }\n\n      if (a[by] > b[by]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  const sortDesc = by => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return 1;\n      }\n\n      if (a[by] > b[by]) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  const sortByNumberAsc = by => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return -1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  const sortByNumberDesc = by => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return 1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  if (planets.length === planetsAPIs.length) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tableElement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, \"Planet\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), \" Name\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortAsc(\"name\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortDesc(\"name\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }, \"Rotation\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }), \" Period\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberAsc(\"rotation_period\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberDesc(\"rotation_period\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, \"Orbital\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }), \" Period\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberAsc(\"orbital_period\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberDesc(\"orbital_period\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, \"Diameter\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberAsc(\"diameter\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberDesc(\"diameter\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, \"Climate\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortAsc(\"climate\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortDesc(\"climate\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, \"Surface\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }), \" Water\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberAsc(\"surface_water\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberDesc(\"surface_water\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, \"Population\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberAsc(\"population\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => sortByNumberDesc(\"population\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, planets.map((planet, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 19\n        }\n      }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 19\n        }\n      }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 19\n        }\n      }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 19\n        }\n      }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 19\n        }\n      }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 19\n        }\n      }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 19\n        }\n      }, planet.population));\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(LoadingScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nexport default TableElement;","map":{"version":3,"sources":["/home/maciej/Desktop/CodersLab/starWars-Deploy/src/Components/App/MainContent/MovieElement/TableElement/TableElement.js"],"names":["React","useState","useEffect","LoadingScreen","TableElement","props","planetsAPIs","planets","setPlanets","forEach","planetAPI","fetch","then","resp","json","data","prevState","sortAsc","by","toSort","sorted","sort","a","b","sortDesc","sortByNumberAsc","parseFloat","sortByNumberDesc","length","map","planet","index","name","rotation_period","orbital_period","diameter","climate","surface_water","population"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAO,qBAAP;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,WAAD,IAAgBL,QAAQ,CAACI,KAAK,CAACE,OAAP,CAA9B;AACA,QAAM,CAACA,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW,CAACG,OAAZ,CAAqBC,SAAD,IAAe;AACjCC,MAAAA,KAAK,CAACD,SAAD,CAAL,CACGE,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESG,IAAD,IACJP,UAAU,CAAEQ,SAAD,IAAe;AACxB,eAAO,CAAC,GAAGA,SAAJ,EAAeD,IAAf,CAAP;AACD,OAFS,CAHd;AAOD,KARD;AASD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAME,OAAO,GAAIC,EAAD,IAAQ;AACtB,QAAIC,MAAM,GAAG,CAAC,GAAGZ,OAAJ,CAAb;AACA,QAAIa,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,UAAID,CAAC,CAACJ,EAAD,CAAD,GAAQK,CAAC,CAACL,EAAD,CAAb,EAAmB;AACjB,eAAO,CAAC,CAAR;AACD;;AACD,UAAII,CAAC,CAACJ,EAAD,CAAD,GAAQK,CAAC,CAACL,EAAD,CAAb,EAAmB;AACjB,eAAO,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF,KATY,CAAb;AAUAV,IAAAA,UAAU,CAACY,MAAD,CAAV;AACD,GAbD;;AAcA,QAAMI,QAAQ,GAAIN,EAAD,IAAQ;AACvB,QAAIC,MAAM,GAAG,CAAC,GAAGZ,OAAJ,CAAb;AACA,QAAIa,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,UAAID,CAAC,CAACJ,EAAD,CAAD,GAAQK,CAAC,CAACL,EAAD,CAAb,EAAmB;AACjB,eAAO,CAAP;AACD;;AACD,UAAII,CAAC,CAACJ,EAAD,CAAD,GAAQK,CAAC,CAACL,EAAD,CAAb,EAAmB;AACjB,eAAO,CAAC,CAAR;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF,KATY,CAAb;AAUAV,IAAAA,UAAU,CAACY,MAAD,CAAV;AACD,GAbD;;AAcA,QAAMK,eAAe,GAAIP,EAAD,IAAQ;AAC9B,QAAIC,MAAM,GAAG,CAAC,GAAGZ,OAAJ,CAAb;AACA,QAAIa,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,UAAID,CAAC,CAACJ,EAAD,CAAD,KAAU,SAAd,EAAyB;AACvB,eAAO,CAAP;AACD,OAFD,MAEO,IAAIK,CAAC,CAACL,EAAD,CAAD,KAAU,SAAd,EAAyB;AAC9B,eAAO,CAAC,CAAR;AACD,OAFM,MAEA,IAAIQ,UAAU,CAACJ,CAAC,CAACJ,EAAD,CAAF,CAAV,GAAoBQ,UAAU,CAACH,CAAC,CAACL,EAAD,CAAF,CAAlC,EAA2C;AAChD,eAAO,CAAC,CAAR;AACD,OAFM,MAEA,IAAIQ,UAAU,CAACJ,CAAC,CAACJ,EAAD,CAAF,CAAV,GAAoBQ,UAAU,CAACH,CAAC,CAACL,EAAD,CAAF,CAAlC,EAA2C;AAChD,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KAZY,CAAb;AAaAV,IAAAA,UAAU,CAACY,MAAD,CAAV;AACD,GAhBD;;AAiBA,QAAMO,gBAAgB,GAAIT,EAAD,IAAQ;AAC/B,QAAIC,MAAM,GAAG,CAAC,GAAGZ,OAAJ,CAAb;AACA,QAAIa,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,UAAID,CAAC,CAACJ,EAAD,CAAD,KAAU,SAAd,EAAyB;AACvB,eAAO,CAAP;AACD,OAFD,MAEO,IAAIK,CAAC,CAACL,EAAD,CAAD,KAAU,SAAd,EAAyB;AAC9B,eAAO,CAAC,CAAR;AACD,OAFM,MAEA,IAAIQ,UAAU,CAACJ,CAAC,CAACJ,EAAD,CAAF,CAAV,GAAoBQ,UAAU,CAACH,CAAC,CAACL,EAAD,CAAF,CAAlC,EAA2C;AAChD,eAAO,CAAP;AACD,OAFM,MAEA,IAAIQ,UAAU,CAACJ,CAAC,CAACJ,EAAD,CAAF,CAAV,GAAoBQ,UAAU,CAACH,CAAC,CAACL,EAAD,CAAF,CAAlC,EAA2C;AAChD,eAAO,CAAC,CAAR;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KAZY,CAAb;AAaAV,IAAAA,UAAU,CAACY,MAAD,CAAV;AACD,GAhBD;;AAkBA,MAAIb,OAAO,CAACqB,MAAR,KAAmBtB,WAAW,CAACsB,MAAnC,EAA2C;AACzC,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,wBAGE;AAAQ,MAAA,OAAO,EAAE,MAAMX,OAAO,CAAC,MAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAMO,QAAQ,CAAC,MAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,0BAGE;AACE,MAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,iBAAD,CADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAME;AACE,MAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,iBAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAPF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,0BAGE;AACE,MAAA,OAAO,EAAE,MAAMF,eAAe,CAAC,gBAAD,CADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAME;AACE,MAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,gBAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAjBF,eA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEE;AAAQ,MAAA,OAAO,EAAE,MAAMF,eAAe,CAAC,UAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,UAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CA3BF,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEE;AAAQ,MAAA,OAAO,EAAE,MAAMV,OAAO,CAAC,SAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAMO,QAAQ,CAAC,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAhCF,eAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,yBAGE;AACE,MAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,eAAD,CADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAME;AACE,MAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,eAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CArCF,eA+CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEE;AAAQ,MAAA,OAAO,EAAE,MAAMF,eAAe,CAAC,YAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,YAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CA/CF,CADF,CADF,eAwDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGpB,OAAO,CAACsB,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,0BACE;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,MAAM,CAACE,IAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,MAAM,CAACG,eAAZ,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,MAAM,CAACI,cAAZ,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,MAAM,CAACK,QAAZ,CAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKL,MAAM,CAACM,OAAZ,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKN,MAAM,CAACO,aAAZ,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKP,MAAM,CAACQ,UAAZ,CAPF,CADF;AAWD,KAZA,CADH,CAxDF,CADF,CADF;AA4ED,GA7ED,MA6EO;AACL,wBAAO,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AACF,CA/JD;;AAiKA,eAAelC,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LoadingScreen from \"./LoadingScreen/LoadingScreen\";\nimport \"./TableElement.scss\";\n\nconst TableElement = (props) => {\n  const [planetsAPIs] = useState(props.planets);\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    planetsAPIs.forEach((planetAPI) => {\n      fetch(planetAPI)\n        .then((resp) => resp.json())\n        .then((data) =>\n          setPlanets((prevState) => {\n            return [...prevState, data];\n          })\n        );\n    });\n  }, []);\n\n  const sortAsc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return -1;\n      }\n      if (a[by] > b[by]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortDesc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return 1;\n      }\n      if (a[by] > b[by]) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortByNumberAsc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return -1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortByNumberDesc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return 1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  if (planets.length === planetsAPIs.length) {\n    return (\n      <div className=\"tableElement\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Planet\n                <br /> Name\n                <button onClick={() => sortAsc(\"name\")}></button>\n                <button onClick={() => sortDesc(\"name\")}></button>\n              </th>\n              <th>\n                Rotation\n                <br /> Period\n                <button\n                  onClick={() => sortByNumberAsc(\"rotation_period\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"rotation_period\")}\n                ></button>\n              </th>\n              <th>\n                Orbital\n                <br /> Period\n                <button\n                  onClick={() => sortByNumberAsc(\"orbital_period\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"orbital_period\")}\n                ></button>\n              </th>\n              <th>\n                Diameter\n                <button onClick={() => sortByNumberAsc(\"diameter\")}></button>\n                <button onClick={() => sortByNumberDesc(\"diameter\")}></button>\n              </th>\n              <th>\n                Climate\n                <button onClick={() => sortAsc(\"climate\")}></button>\n                <button onClick={() => sortDesc(\"climate\")}></button>\n              </th>\n              <th>\n                Surface\n                <br /> Water\n                <button\n                  onClick={() => sortByNumberAsc(\"surface_water\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"surface_water\")}\n                ></button>\n              </th>\n              <th>\n                Population\n                <button onClick={() => sortByNumberAsc(\"population\")}></button>\n                <button onClick={() => sortByNumberDesc(\"population\")}></button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {planets.map((planet, index) => {\n              return (\n                <tr key={index}>\n                  <td>{planet.name}</td>\n                  <td>{planet.rotation_period}</td>\n                  <td>{planet.orbital_period}</td>\n                  <td>{planet.diameter}</td>\n                  <td>{planet.climate}</td>\n                  <td>{planet.surface_water}</td>\n                  <td>{planet.population}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  } else {\n    return <LoadingScreen />;\n  }\n};\n\nexport default TableElement;\n"]},"metadata":{},"sourceType":"module"}