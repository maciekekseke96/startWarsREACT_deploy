{"ast":null,"code":"var _jsxFileName = \"/home/maciej/Desktop/CodersLab/starWars-Deploy/src/Components/App/Footer/MovieForm/MovieForm.js\";\nimport React, { useState } from \"react\";\nimport \"./MovieForm.scss\";\n\nconst MovieFormContainer = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movieFormContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MovieForm, {\n    setStarWarsMovies: props.setStarWarsMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst MovieForm = props => {\n  const [movieTitle, setMovieTitle] = useState(\"\");\n  const [planetSearcher, setPlanetSearcher] = useState(\"\");\n  const [planetsFound, setPlanetsFound] = useState([]);\n  const [planetsChoosen, setPlanetsChoosen] = useState([]);\n  const [titleError, setTitleError] = useState(false);\n\n  const choosePlanet = planet => {\n    setPlanetsChoosen(prevstate => {\n      return [...prevstate, planet];\n    });\n    setPlanetSearcher(\"\");\n    setPlanetsFound([]);\n  };\n\n  const deletePlanet = index => {\n    setPlanetsChoosen(planetsChoosen.filter((planet, i) => {\n      return i !== index;\n    }));\n  };\n\n  const addMovie = event => {\n    event.preventDefault();\n\n    if (titleError === false && planetsChoosen.length > 0 && movieTitle.length > 2) {\n      let planetsAPIs = [];\n      planetsChoosen.forEach(planet => {\n        planetsAPIs.push(planet.url);\n      });\n      const filmObject = {\n        title: movieTitle,\n        planets: planetsAPIs\n      };\n      props.setStarWarsMovies(prevstate => {\n        return [...prevstate, filmObject];\n      });\n      setPlanetsChoosen([]);\n      setPlanetsFound([]);\n      setMovieTitle(\"\");\n      setPlanetSearcher(\"\");\n    } else {\n      alert(\"Let's check your title (at least 3 characters) or choose some planets!\");\n    }\n  };\n\n  let btnStyles = {\n    position: \"absolute\",\n    right: \"50px\",\n    bottom: \"25px\",\n    width: \"120px\",\n    height: \"40px\",\n    fontFamily: '\"Ubuntu\", sans-serif',\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"10%\"\n  };\n\n  if (titleError === false && planetsChoosen.length > 0 && movieTitle.length > 2) {\n    btnStyles = { ...btnStyles,\n      backgroundColor: \"#1BA1BE\"\n    };\n  } else {\n    btnStyles = { ...btnStyles,\n      backgroundColor: \"rgb(212, 206, 206)\"\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"movieForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"specific\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Movie title\", titleError && /*#__PURE__*/React.createElement(ErrorHandler, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 24\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: event => {\n      setMovieTitle(event.target.value);\n    },\n    onKeyUp: () => {\n      if (movieTitle.length > 0 && movieTitle[0] !== movieTitle[0].toUpperCase()) {\n        setTitleError(true);\n      } else {\n        setTitleError(false);\n      }\n    },\n    type: \"text\",\n    value: movieTitle,\n    placeholder: \"Type the title of your movie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), PlanetsChoosen.length > 0 && /*#__PURE__*/React.createElement(PlanetsChoosen, {\n    deletePlanet: deletePlanet,\n    planets: planetsChoosen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"specific\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, \"Add planet\", planetsFound.length > 0 && /*#__PURE__*/React.createElement(PlanetsFound, {\n    choosePlanet: choosePlanet,\n    planets: planetsFound,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    value: planetSearcher,\n    onChange: event => {\n      setPlanetSearcher(event.target.value);\n    },\n    onKeyUp: event => {\n      if (event.target.value.length > 0) {\n        fetch(`https://swapi.dev/api/planets/?search=${event.target.value}`).then(resp => resp.json()).then(data => setPlanetsFound(data.results));\n      } else {\n        setPlanetsFound([]);\n      }\n    },\n    type: \"text\",\n    placeholder: \"Let's search for your planet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    style: btnStyles,\n    onClick: event => addMovie(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, \"Add Movie\"));\n};\n\nconst PlanetsChoosen = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"planetsChoosen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, props.planets.map((planet, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"planet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, planet.name, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => props.deletePlanet(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, \"X\"));\n  }));\n};\n\nconst PlanetsFound = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"planetsFound\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, props.planets.map((planet, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => props.choosePlanet(planet),\n      key: index,\n      className: \"planet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, planet.name);\n  }));\n};\n\nconst ErrorHandler = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, \"Movie title name must start with a capital letter.\");\n};\n\nexport default MovieFormContainer;","map":{"version":3,"sources":["/home/maciej/Desktop/CodersLab/starWars-Deploy/src/Components/App/Footer/MovieForm/MovieForm.js"],"names":["React","useState","MovieFormContainer","props","setStarWarsMovies","MovieForm","movieTitle","setMovieTitle","planetSearcher","setPlanetSearcher","planetsFound","setPlanetsFound","planetsChoosen","setPlanetsChoosen","titleError","setTitleError","choosePlanet","planet","prevstate","deletePlanet","index","filter","i","addMovie","event","preventDefault","length","planetsAPIs","forEach","push","url","filmObject","title","planets","alert","btnStyles","position","right","bottom","width","height","fontFamily","color","border","borderRadius","backgroundColor","target","value","toUpperCase","PlanetsChoosen","fetch","then","resp","json","data","results","map","name","PlanetsFound","ErrorHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./MovieForm.scss\";\n\nconst MovieFormContainer = (props) => {\n  return (\n    <div className=\"movieFormContainer\">\n      <MovieForm setStarWarsMovies={props.setStarWarsMovies} />\n    </div>\n  );\n};\n\nconst MovieForm = (props) => {\n  const [movieTitle, setMovieTitle] = useState(\"\");\n  const [planetSearcher, setPlanetSearcher] = useState(\"\");\n  const [planetsFound, setPlanetsFound] = useState([]);\n  const [planetsChoosen, setPlanetsChoosen] = useState([]);\n  const [titleError, setTitleError] = useState(false);\n\n  const choosePlanet = (planet) => {\n    setPlanetsChoosen((prevstate) => {\n      return [...prevstate, planet];\n    });\n    setPlanetSearcher(\"\");\n    setPlanetsFound([]);\n  };\n\n  const deletePlanet = (index) => {\n    setPlanetsChoosen(\n      planetsChoosen.filter((planet, i) => {\n        return i !== index;\n      })\n    );\n  };\n\n  const addMovie = (event) => {\n    event.preventDefault();\n    if (\n      titleError === false &&\n      planetsChoosen.length > 0 &&\n      movieTitle.length > 2\n    ) {\n      let planetsAPIs = [];\n      planetsChoosen.forEach((planet) => {\n        planetsAPIs.push(planet.url);\n      });\n      const filmObject = {\n        title: movieTitle,\n        planets: planetsAPIs,\n      };\n      props.setStarWarsMovies((prevstate) => {\n        return [...prevstate, filmObject];\n      });\n      setPlanetsChoosen([]);\n      setPlanetsFound([]);\n      setMovieTitle(\"\");\n      setPlanetSearcher(\"\");\n    } else {\n      alert(\n        \"Let's check your title (at least 3 characters) or choose some planets!\"\n      );\n    }\n  };\n  let btnStyles = {\n    position: \"absolute\",\n    right: \"50px\",\n    bottom: \"25px\",\n    width: \"120px\",\n    height: \"40px\",\n    fontFamily: '\"Ubuntu\", sans-serif',\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"10%\",\n  };\n  if (\n    titleError === false &&\n    planetsChoosen.length > 0 &&\n    movieTitle.length > 2\n  ) {\n    btnStyles = {\n      ...btnStyles,\n      backgroundColor: \"#1BA1BE\",\n    };\n  } else {\n    btnStyles = {\n      ...btnStyles,\n      backgroundColor: \"rgb(212, 206, 206)\",\n    };\n  }\n  return (\n    <form className=\"movieForm\">\n      <label className=\"specific\">\n        Movie title\n        {titleError && <ErrorHandler />}\n      </label>\n      <input\n        onChange={(event) => {\n          setMovieTitle(event.target.value);\n        }}\n        onKeyUp={() => {\n          if (\n            movieTitle.length > 0 &&\n            movieTitle[0] !== movieTitle[0].toUpperCase()\n          ) {\n            setTitleError(true);\n          } else {\n            setTitleError(false);\n          }\n        }}\n        type=\"text\"\n        value={movieTitle}\n        placeholder=\"Type the title of your movie\"\n      ></input>\n      {PlanetsChoosen.length > 0 && (\n        <PlanetsChoosen deletePlanet={deletePlanet} planets={planetsChoosen} />\n      )}\n      <label className=\"specific\">\n        Add planet\n        {planetsFound.length > 0 && (\n          <PlanetsFound choosePlanet={choosePlanet} planets={planetsFound} />\n        )}\n      </label>\n      <input\n        value={planetSearcher}\n        onChange={(event) => {\n          setPlanetSearcher(event.target.value);\n        }}\n        onKeyUp={(event) => {\n          if (event.target.value.length > 0) {\n            fetch(`https://swapi.dev/api/planets/?search=${event.target.value}`)\n              .then((resp) => resp.json())\n              .then((data) => setPlanetsFound(data.results));\n          } else {\n            setPlanetsFound([]);\n          }\n        }}\n        type=\"text\"\n        placeholder=\"Let's search for your planet\"\n      ></input>\n      <button style={btnStyles} onClick={(event) => addMovie(event)}>\n        Add Movie\n      </button>\n    </form>\n  );\n};\n\nconst PlanetsChoosen = (props) => {\n  return (\n    <div className=\"planetsChoosen\">\n      {props.planets.map((planet, index) => {\n        return (\n          <div key={index} className=\"planet\">\n            {planet.name}\n            <div onClick={() => props.deletePlanet(index)}>X</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst PlanetsFound = (props) => {\n  return (\n    <div className=\"planetsFound\">\n      {props.planets.map((planet, index) => {\n        return (\n          <div\n            onClick={() => props.choosePlanet(planet)}\n            key={index}\n            className=\"planet\"\n          >\n            {planet.name}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst ErrorHandler = () => {\n  return (\n    <div className=\"error\">\n      Movie title name must start with a capital letter.\n    </div>\n  );\n};\n\nexport default MovieFormContainer;\n"]},"metadata":{},"sourceType":"module"}