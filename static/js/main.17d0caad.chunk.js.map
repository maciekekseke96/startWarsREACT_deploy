{"version":3,"sources":["Components/App/Header/Header.js","Components/App/MainContent/MovieElement/TableElement/LoadingScreen/LoadingScreen.js","Components/App/MainContent/MovieElement/TableElement/TableElement.js","Components/App/MainContent/MovieElement/MovieElement.js","Components/App/MainContent/LoadingScreen/LoadingScreen.js","Components/App/MainContent/MainContent.js","Components/App/Footer/MovieForm/MovieForm.js","Components/App/Footer/Footer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","LoadingScreen","TableElement","props","useState","planets","planetsAPIs","setPlanets","useEffect","forEach","planetAPI","fetch","then","resp","json","data","prevState","sortAsc","by","sorted","sort","a","b","sortDesc","sortByNumberAsc","parseFloat","sortByNumberDesc","length","onClick","map","planet","index","key","name","rotation_period","orbital_period","diameter","climate","surface_water","population","MovieElement","isShown","setIsShown","movie","title","MainContent","movies","MovieForm","movieTitle","setMovieTitle","planetSearcher","setPlanetSearcher","planetsFound","setPlanetsFound","planetsChoosen","setPlanetsChoosen","titleError","setTitleError","btnStyles","position","right","bottom","width","height","fontFamily","color","border","borderRadius","backgroundColor","onChange","event","target","value","onKeyUp","toUpperCase","type","placeholder","PlanetsChoosen","deletePlanet","filter","i","choosePlanet","prevstate","results","style","preventDefault","push","url","filmObject","setStarWarsMovies","alert","addMovie","PlanetsFound","ErrorHandler","MovieFormContainer","Footer","App","starWarsMovies","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17d0caad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nconst Header = () => {\n  return <div className=\"headerImg\"></div>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./LoadingScreen.scss\";\n\nconst LoadingScreen = () => {\n  return (\n    <div className=\"loadingTable\">\n      <div className=\"loadingIcon\"></div>\n    </div>\n  );\n};\n\nexport default LoadingScreen;\n","import React, { useState, useEffect } from \"react\";\nimport LoadingScreen from \"./LoadingScreen/LoadingScreen\";\nimport \"./TableElement.scss\";\n\nconst TableElement = (props) => {\n  const [planetsAPIs] = useState(props.planets);\n  const [planets, setPlanets] = useState([]);\n\n  useEffect(() => {\n    planetsAPIs.forEach((planetAPI) => {\n      fetch(planetAPI)\n        .then((resp) => resp.json())\n        .then((data) =>\n          setPlanets((prevState) => {\n            return [...prevState, data];\n          })\n        );\n    });\n  }, []);\n\n  const sortAsc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return -1;\n      }\n      if (a[by] > b[by]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortDesc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] < b[by]) {\n        return 1;\n      }\n      if (a[by] > b[by]) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortByNumberAsc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return -1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n  const sortByNumberDesc = (by) => {\n    let toSort = [...planets];\n    let sorted = toSort.sort((a, b) => {\n      if (a[by] === \"unknown\") {\n        return 1;\n      } else if (b[by] === \"unknown\") {\n        return -1;\n      } else if (parseFloat(a[by]) < parseFloat(b[by])) {\n        return 1;\n      } else if (parseFloat(a[by]) > parseFloat(b[by])) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    setPlanets(sorted);\n  };\n\n  if (planets.length === planetsAPIs.length) {\n    return (\n      <div className=\"tableElement\">\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Planet\n                <br /> Name\n                <button onClick={() => sortAsc(\"name\")}></button>\n                <button onClick={() => sortDesc(\"name\")}></button>\n              </th>\n              <th>\n                Rotation\n                <br /> Period\n                <button\n                  onClick={() => sortByNumberAsc(\"rotation_period\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"rotation_period\")}\n                ></button>\n              </th>\n              <th>\n                Orbital\n                <br /> Period\n                <button\n                  onClick={() => sortByNumberAsc(\"orbital_period\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"orbital_period\")}\n                ></button>\n              </th>\n              <th>\n                Diameter\n                <button onClick={() => sortByNumberAsc(\"diameter\")}></button>\n                <button onClick={() => sortByNumberDesc(\"diameter\")}></button>\n              </th>\n              <th>\n                Climate\n                <button onClick={() => sortAsc(\"climate\")}></button>\n                <button onClick={() => sortDesc(\"climate\")}></button>\n              </th>\n              <th>\n                Surface\n                <br /> Water\n                <button\n                  onClick={() => sortByNumberAsc(\"surface_water\")}\n                ></button>\n                <button\n                  onClick={() => sortByNumberDesc(\"surface_water\")}\n                ></button>\n              </th>\n              <th>\n                Population\n                <button onClick={() => sortByNumberAsc(\"population\")}></button>\n                <button onClick={() => sortByNumberDesc(\"population\")}></button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {planets.map((planet, index) => {\n              return (\n                <tr key={index}>\n                  <td>{planet.name}</td>\n                  <td>{planet.rotation_period}</td>\n                  <td>{planet.orbital_period}</td>\n                  <td>{planet.diameter}</td>\n                  <td>{planet.climate}</td>\n                  <td>{planet.surface_water}</td>\n                  <td>{planet.population}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  } else {\n    return <LoadingScreen />;\n  }\n};\n\nexport default TableElement;\n","import React, { useState } from \"react\";\nimport TableElement from \"./TableElement/TableElement\";\nimport \"./MovieElement.scss\";\n\nconst MovieElement = (props) => {\n  const [isShown, setIsShown] = useState(false);\n\n  return (\n    <>\n      <div className=\"movieElement\">\n        <p className=\"movieTitle\">{props.movie.title}</p>\n        <div className=\"wrapBtn\" onClick={() => setIsShown(!isShown)}></div>\n      </div>\n      {isShown && <TableElement planets={props.movie.planets} />}\n    </>\n  );\n};\n\nexport default MovieElement;\n","import React from \"react\";\nimport \"./LoadingScreen.scss\";\n\nconst LoadingScreen = () => {\n  return (\n    <div className=\"loadingScreen\">\n        <div className=\"loadingIcon\"></div>\n    </div>\n  );\n};\n\nexport default LoadingScreen;","import React from \"react\";\nimport MovieElement from \"./MovieElement/MovieElement\";\nimport LoadingScreen from \"./LoadingScreen/LoadingScreen\";\nimport \"./MainContent.scss\";\n\nconst MainContent = (props) => {\n  if (props.movies.length > 0) {\n    return (\n      <div className=\"mainContent\">\n        {props.movies.map((movie, index) => {\n          return <MovieElement key={index} movie={movie} />;\n        })}\n      </div>\n    );\n  } else {\n    return <LoadingScreen />;\n  }\n};\n\nexport default MainContent;\n","import React, { useState } from \"react\";\nimport \"./MovieForm.scss\";\n\nconst MovieFormContainer = (props) => {\n  return (\n    <div className=\"movieFormContainer\">\n      <MovieForm setStarWarsMovies={props.setStarWarsMovies} />\n    </div>\n  );\n};\n\nconst MovieForm = (props) => {\n  const [movieTitle, setMovieTitle] = useState(\"\");\n  const [planetSearcher, setPlanetSearcher] = useState(\"\");\n  const [planetsFound, setPlanetsFound] = useState([]);\n  const [planetsChoosen, setPlanetsChoosen] = useState([]);\n  const [titleError, setTitleError] = useState(false);\n\n  const choosePlanet = (planet) => {\n    setPlanetsChoosen((prevstate) => {\n      return [...prevstate, planet];\n    });\n    setPlanetSearcher(\"\");\n    setPlanetsFound([]);\n  };\n\n  const deletePlanet = (index) => {\n    setPlanetsChoosen(\n      planetsChoosen.filter((planet, i) => {\n        return i !== index;\n      })\n    );\n  };\n\n  const addMovie = (event) => {\n    event.preventDefault();\n    if (\n      titleError === false &&\n      planetsChoosen.length > 0 &&\n      movieTitle.length > 2\n    ) {\n      let planetsAPIs = [];\n      planetsChoosen.forEach((planet) => {\n        planetsAPIs.push(planet.url);\n      });\n      const filmObject = {\n        title: movieTitle,\n        planets: planetsAPIs,\n      };\n      props.setStarWarsMovies((prevstate) => {\n        return [...prevstate, filmObject];\n      });\n      setPlanetsChoosen([]);\n      setPlanetsFound([]);\n      setMovieTitle(\"\");\n      setPlanetSearcher(\"\");\n    } else {\n      alert(\n        \"Let's check your title (at least 3 characters) or choose some planets!\"\n      );\n    }\n  };\n  let btnStyles = {\n    position: \"absolute\",\n    right: \"50px\",\n    bottom: \"25px\",\n    width: \"120px\",\n    height: \"40px\",\n    fontFamily: '\"Ubuntu\", sans-serif',\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"10%\",\n  };\n  if (\n    titleError === false &&\n    planetsChoosen.length > 0 &&\n    movieTitle.length > 2\n  ) {\n    btnStyles = {\n      ...btnStyles,\n      backgroundColor: \"#1BA1BE\",\n    };\n  } else {\n    btnStyles = {\n      ...btnStyles,\n      backgroundColor: \"rgb(212, 206, 206)\",\n    };\n  }\n  return (\n    <form className=\"movieForm\">\n      <label className=\"specific\">\n        Movie title\n        {titleError && <ErrorHandler />}\n      </label>\n      <input\n        onChange={(event) => {\n          setMovieTitle(event.target.value);\n        }}\n        onKeyUp={() => {\n          if (\n            movieTitle.length > 0 &&\n            movieTitle[0] !== movieTitle[0].toUpperCase()\n          ) {\n            setTitleError(true);\n          } else {\n            setTitleError(false);\n          }\n        }}\n        type=\"text\"\n        value={movieTitle}\n        placeholder=\"Type the title of your movie\"\n      ></input>\n      {PlanetsChoosen.length > 0 && (\n        <PlanetsChoosen deletePlanet={deletePlanet} planets={planetsChoosen} />\n      )}\n      <label className=\"specific\">\n        Add planet\n        {planetsFound.length > 0 && (\n          <PlanetsFound choosePlanet={choosePlanet} planets={planetsFound} />\n        )}\n      </label>\n      <input\n        value={planetSearcher}\n        onChange={(event) => {\n          setPlanetSearcher(event.target.value);\n        }}\n        onKeyUp={(event) => {\n          if (event.target.value.length > 0) {\n            fetch(`https://swapi.dev/api/planets/?search=${event.target.value}`)\n              .then((resp) => resp.json())\n              .then((data) => setPlanetsFound(data.results));\n          } else {\n            setPlanetsFound([]);\n          }\n        }}\n        type=\"text\"\n        placeholder=\"Let's search for your planet\"\n      ></input>\n      <button style={btnStyles} onClick={(event) => addMovie(event)}>\n        Add Movie\n      </button>\n    </form>\n  );\n};\n\nconst PlanetsChoosen = (props) => {\n  return (\n    <div className=\"planetsChoosen\">\n      {props.planets.map((planet, index) => {\n        return (\n          <div key={index} className=\"planet\">\n            {planet.name}\n            <div onClick={() => props.deletePlanet(index)}>X</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst PlanetsFound = (props) => {\n  return (\n    <div className=\"planetsFound\">\n      {props.planets.map((planet, index) => {\n        return (\n          <div\n            onClick={() => props.choosePlanet(planet)}\n            key={index}\n            className=\"planet\"\n          >\n            {planet.name}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst ErrorHandler = () => {\n  return (\n    <div className=\"error\">\n      Movie title name must start with a capital letter.\n    </div>\n  );\n};\n\nexport default MovieFormContainer;\n","import React, { useState } from \"react\";\nimport MovieFormContainer from \"./MovieForm/MovieForm\";\nimport \"./Footer.scss\";\n\nconst Footer = (props) => {\n  const [isShown, setIsShown] = useState(false);\n  return (\n    <>\n      <div className=\"footer\">\n        <p>Add Movie</p>\n        <div className=\"wrapBtn\" onClick={() => setIsShown(!isShown)}></div>\n      </div>\n      {isShown && (\n        <MovieFormContainer setStarWarsMovies={props.setStarWarsMovies} />\n      )}\n    </>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Header/Header\";\nimport MainContent from \"./MainContent/MainContent\";\nimport Footer from \"./Footer/Footer\";\n\nfunction App() {\n  const [starWarsMovies, setStarWarsMovies] = useState([]);\n  useEffect(() => {\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        setStarWarsMovies(data.results);\n      });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <MainContent movies={starWarsMovies} />\n      <div className=\"slicer\"></div>\n      <Footer setStarWarsMovies={setStarWarsMovies} />\n      <div className=\"copyright\">\n        <p>COPYRIGHT &copy; 2020 MIRUMEE SOFTWARE</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from \"./Components/App/App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}